// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef USEROBJECT_H
#define USEROBJECT_H

#include "GQLSchema.h"

namespace graphql::database::object {
namespace methods::UserHas {

template <class TImpl>
concept getIdWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getId(std::move(params)) } };
};

template <class TImpl>
concept getId = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<int>> { impl.getId() } };
};

template <class TImpl>
concept getFirst_nameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getFirst_name(std::move(params)) } };
};

template <class TImpl>
concept getFirst_name = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getFirst_name() } };
};

template <class TImpl>
concept getLast_nameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getLast_name(std::move(params)) } };
};

template <class TImpl>
concept getLast_name = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getLast_name() } };
};

template <class TImpl>
concept getEmailWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getEmail(std::move(params)) } };
};

template <class TImpl>
concept getEmail = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getEmail() } };
};

template <class TImpl>
concept getTitleWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getTitle(std::move(params)) } };
};

template <class TImpl>
concept getTitle = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getTitle() } };
};

template <class TImpl>
concept getLoginWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getLogin(std::move(params)) } };
};

template <class TImpl>
concept getLogin = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getLogin() } };
};

template <class TImpl>
concept getPasswordWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getPassword(std::move(params)) } };
};

template <class TImpl>
concept getPassword = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getPassword() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::UserHas

class [[nodiscard]] User final
	: public service::Object
{
private:
	[[nodiscard]] service::AwaitableResolver resolveId(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveFirst_name(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveLast_name(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveEmail(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveTitle(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolveLogin(service::ResolverParams&& params) const;
	[[nodiscard]] service::AwaitableResolver resolvePassword(service::ResolverParams&& params) const;

	[[nodiscard]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard]] virtual service::AwaitableScalar<std::optional<int>> getId(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getFirst_name(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getLast_name(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getEmail(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getTitle(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getLogin(service::FieldParams&& params) const = 0;
		[[nodiscard]] virtual service::AwaitableScalar<std::string> getPassword(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard]] Model
		: Concept
	{
		Model(std::shared_ptr<T>&& pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard]] service::AwaitableScalar<std::optional<int>> getId(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getIdWithParams<T>)
			{
				return { _pimpl->getId(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getId<T>, R"msg(User::getId is not implemented)msg");
				return { _pimpl->getId() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getFirst_name(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getFirst_nameWithParams<T>)
			{
				return { _pimpl->getFirst_name(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getFirst_name<T>, R"msg(User::getFirst_name is not implemented)msg");
				return { _pimpl->getFirst_name() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getLast_name(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getLast_nameWithParams<T>)
			{
				return { _pimpl->getLast_name(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getLast_name<T>, R"msg(User::getLast_name is not implemented)msg");
				return { _pimpl->getLast_name() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getEmail(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getEmailWithParams<T>)
			{
				return { _pimpl->getEmail(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getEmail<T>, R"msg(User::getEmail is not implemented)msg");
				return { _pimpl->getEmail() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getTitle(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getTitleWithParams<T>)
			{
				return { _pimpl->getTitle(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getTitle<T>, R"msg(User::getTitle is not implemented)msg");
				return { _pimpl->getTitle() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getLogin(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getLoginWithParams<T>)
			{
				return { _pimpl->getLogin(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getLogin<T>, R"msg(User::getLogin is not implemented)msg");
				return { _pimpl->getLogin() };
			}
		}

		[[nodiscard]] service::AwaitableScalar<std::string> getPassword(service::FieldParams&& params) const final
		{
			if constexpr (methods::UserHas::getPasswordWithParams<T>)
			{
				return { _pimpl->getPassword(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserHas::getPassword<T>, R"msg(User::getPassword is not implemented)msg");
				return { _pimpl->getPassword() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::UserHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const final
		{
			if constexpr (methods::UserHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	User(std::unique_ptr<const Concept>&& pimpl) noexcept;

	[[nodiscard]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const final;
	void endSelectionSet(const service::SelectionSetParams& params) const final;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	User(std::shared_ptr<T> pimpl) noexcept
		: User { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(User)gql" };
	}
};

} // namespace graphql::database::object

#endif // USEROBJECT_H
