// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef GQLSCHEMA_H
#define GQLSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 4.5.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 5, "regenerate with schemagen: minor version mismatch");

#include <array>
#include <memory>
#include <string>
#include <string_view>

namespace graphql {
namespace database {
namespace object {

class Mutations;
class Query;
class User;

} // namespace object

class [[nodiscard]] Operations final
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutations> mutation);

	template <class TQuery, class TMutations>
	explicit Operations(std::shared_ptr<TQuery> query, std::shared_ptr<TMutations> mutation)
		: Operations {
			std::make_shared<object::Query>(std::move(query)),
			std::make_shared<object::Mutations>(std::move(mutation))
		}
	{
	}

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutations> _mutation;
};

void AddMutationsDetails(const std::shared_ptr<schema::ObjectType>& typeMutations, const std::shared_ptr<schema::Schema>& schema);
void AddQueryDetails(const std::shared_ptr<schema::ObjectType>& typeQuery, const std::shared_ptr<schema::Schema>& schema);
void AddUserDetails(const std::shared_ptr<schema::ObjectType>& typeUser, const std::shared_ptr<schema::Schema>& schema);

std::shared_ptr<schema::Schema> GetSchema();

} // namespace database
} // namespace graphql

#endif // GQLSCHEMA_H
