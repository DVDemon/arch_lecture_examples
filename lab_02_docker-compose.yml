version: '3.2'
services:
  lab_02_user:
    tty: true
    container_name: lab_02_user
    build:
      context: .
      dockerfile: lab_02_dockerfile
    environment:
      - DB_HOST=lab02_postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongodb_lab2
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - lab02-network
  lab_02_pizza:
    tty: true
    container_name: lab_02_pizza
    build:
      context: .
      dockerfile: lab_02_dockerfile
    environment:
      - DB_HOST=lab02_postgres
      - DB_PORT=5432
      - DB_LOGIN=stud
      - DB_PASSWORD=stud
      - DB_DATABASE=archdb
      - MONGO_HOST=mongodb_lab2
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - lab02-network

  db:
    container_name: lab02_postgres
    image: postgres:15
    environment:
      - POSTGRES_USER=stud
      - POSTGRES_PASSWORD=stud
      - PGDATA=/data/postgres
      - POSTGRES_DB=archdb
    volumes:
      - lab02_db:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - lab02-network
  mongodb_lab2:
    image: mongo:5.0
    container_name: mongodb_lab2
    restart: on-failure
    networks:
      - lab02-network
    volumes:
      - mongodbdata_lab2:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

volumes:
  lab02_db:
  mongodbdata_lab2:


networks:
  lab02-network:
    driver: "bridge"
    external: false